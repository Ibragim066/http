(()=>{"use strict";class t{constructor(t,e,i){this.container=t,this.formContainer=null,this.errorElement=null,this.form=null,this.createCallback=i,this.updateCallback=e,this.bindToDOM()}bindToDOM(){this.createFormContainer({name:"",description:""}),this.events()}createFormContainer(e){this.formContainer=document.createElement("div"),this.formContainer.classList.add("ticket-form-container"),this.formContainer.innerHTML=t.markup(e),this.container.append(this.formContainer)}events(){const e=this.formContainer.querySelector('[data-toggle="ticket-close"]');this.form=this.formContainer.querySelector("form");const i=this.form.querySelectorAll("input, textarea");e.addEventListener("click",(()=>this.hide())),this.form.addEventListener("submit",(t=>this.onSubmit(t))),i.forEach((e=>{e.addEventListener("input",(()=>t.removeErrorClass(e)))}))}async show(e){this.formContainer.classList.add("ticket-form-container_visible"),e&&(this.ticketId=e.id,this.formContainer.innerHTML=t.markup(e),this.events())}hide(){this.formContainer.classList.remove("ticket-form-container_visible"),this.form.reset()}async onSubmit(e){e.preventDefault();const i=Array.from(this.form.elements),s=t.getNotValidEl(i);if(s)return void s.classList.add("error");const a=Object.fromEntries(new FormData(e.target));this.ticketId?await this.updateCallback(this.ticketId,a):await this.createCallback(a)}static removeErrorClass(t){t.value.trim()&&t.classList.remove("error")}static markup(t){return`\n      <form id="ticket-form" novalidate>\n      <div class="form-control form-ticket">\n        <label class="label-ticket" for="name">Краткое описание</label>\n        <input name="name" data-id="name" class="input input-ticket" type="text" placeholder="ticket name" autocomplete="off" value="${t.name}" required> \n      </div>\n      <div class="form-control form-ticket">\n        <label for="description" class="label-ticket">Подробное описание</label>\n        <textarea name="description" data-id="description" class="input input-ticket" placeholder="ticket description" autocomplete="off"\n            cols="25" rows="5" maxlength="100" minlength="20" tabindex="0">${t.description}</textarea>\n      </div>\n      <div class="ticket-btn">\n        <button type="button" class="btn btn-add" data-toggle="ticket-close" title="Close ticket form">Отмена</button>\n        <button type="submit" class="btn btn-close" data-toggle="ticket-add" title="Submit ticket form">ОК</button>\n      </div>\n    </form>`}static getNotValidEl(t){return t.find((t=>"button"!==t.type&&"submit"!==t.type&&!t.value.trim()))}}const e=async function(t,e){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};try{let a;const n="allTickets"===e||e.startsWith("delete")||e.startsWith("ticket");switch(e){case"createTicket":a=await fetch(`${t}?method=${e}`,{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",...s}});break;case"updateById":if(!i.id)return console.error("ID is required for updateById method"),null;a=await fetch(`${t}?method=${e}&id=${i.id}`,{method:"POST",body:JSON.stringify(i),headers:{"Content-Type":"application/json",...s}});break;case"allTickets":case"ticketById":case"deleteById":{if(n&&"allTickets"!==e&&!i.id)return console.error("ID is required for ticketById and deleteById methods"),null;const r=new URLSearchParams(n?i:{}).toString();a=await fetch(`${t}?method=${e}${r?`&${r}`:""}`,{method:"GET",headers:{"Content-Type":"application/json",...s}});break}default:return console.error("Unsupported method:",e),null}return a.ok?"deleteById"===e?"success":await a.json():(console.error(`Server error: ${a.statusText}`),null)}catch(t){return console.error("Network error:",t),null}};class i{constructor(t){this.url=t}list(){return e(this.url,"allTickets")}get(t){return e(this.url,"ticketById",{id:t})}create(t){return e(this.url,"createTicket",t)}update(t,i){return e(this.url,"updateById",{...i,id:t})}delete(t){return e(this.url,"deleteById",{id:t})}}class s{constructor(t,e,i,s){let{id:a,name:n,description:r,status:o,created:c}=t;this.id=a,this.name=n,this.description=r,this.status=o,this.created=c,this.container=e,this.updateCallback=i,this.showFormCallback=s,this.bind()}bind(){this.container.innerHTML=this.markup,this.events()}events(){const t=this.container.querySelector(".update"),e=this.container.querySelector(".delete"),i=this.container.querySelector(".done"),s=this.container.querySelector(".ticket-body");t.addEventListener("click",(()=>this.update())),e.addEventListener("click",(()=>this.delete())),s.addEventListener("click",(()=>this.showDescription())),i.addEventListener("click",(()=>this.done()))}update(){this.showFormCallback(this.id)}delete(){const t=document.querySelector(".delete-message");t.classList.add("delete-message_visible"),t.setAttribute("data-id",this.id)}showDescription(){this.container.querySelector(".ticket-description").classList.toggle("ticket-description_visible")}done(){this.updateCallback(this.id,{status:!this.status})}get markup(){const t=new Date(this.created).toLocaleString("ru-RU");return`\n    <span class="done" data-status="${this.status}">${this.status?"&#10003;":""}</span>\n    <th class='ticket-body'> \n      <div>\n      <span colspan="2" class="ticket-name" data-name="${this.name}">${this.name}</span>\n      <span colspan="2" class="ticket-description" >${this.description}</span>\n      </div>\n      <span colspan="2" class="ticket-created">${t}</span>\n    </th>\n    <th class="ticket-actions"><span class="update">✎</span><span class="delete">✖</span></th>\n    `}}class a{constructor(t,e,i){this.container=t,this.updateCallback=e,this.showFormCallback=i,this.tickets=[]}bindToDOM(t){t.forEach((t=>{const e=document.createElement("tr"),i=new s(t,e,this.updateCallback,this.showFormCallback);this.tickets.push(i),e.setAttribute("data-row",t.id),e.classList.add("ticket-row"),this.container.append(e)}))}}class n{constructor(t,e){if(!(t instanceof HTMLElement))throw new Error("This is not HTML element!");this.container=t,this.ticketService=new i(e),this.form=null,this.ticketView=null,this.tableBody=null,this.deleteMessage=null,this.updateTicket=this.updateTicket.bind(this),this.showForm=this.showForm.bind(this),this.createTicket=this.createTicket.bind(this)}async init(){this.renderInitialMarkup(),this.initializeDOMElements(),this.initializeTicketView(),this.initializeTicketForm(),this.events(),await this.reloadData()}renderInitialMarkup(){this.container.innerHTML=n.markup()}initializeDOMElements(){this.tableBody=this.container.querySelector("tbody"),this.deleteMessage=this.container.querySelector(".delete-message")}initializeTicketView(){this.ticketView=new a(this.tableBody,this.updateTicket,this.showForm)}initializeTicketForm(){this.form=new t(this.container,this.updateTicket,this.createTicket)}events(){const t=this.container.querySelector('[data-id="add"]'),e=this.container.querySelector('[data-toggle="delete-ticket"]'),i=this.container.querySelector('[data-toggle="close-message"]');t.addEventListener("click",(()=>this.showForm())),e.addEventListener("click",(()=>this.deleteTicket())),i.addEventListener("click",(()=>this.closeMessage()))}async reloadData(){for(;this.tableBody.firstChild;)this.tableBody.removeChild(this.tableBody.firstChild);const t=await this.ticketService.list();t&&this.ticketView.bindToDOM(t)}async deleteTicket(){null!==await this.ticketService.delete(this.deleteMessage.dataset.id)&&(await this.reloadData(),this.closeMessage())}async createTicket(t){null!==await this.ticketService.create(t)&&(await this.reloadData(),this.form.hide())}async updateTicket(t,e){null!==await this.ticketService.update(t,e)&&(await this.reloadData(),this.form.hide())}async getTicket(t){return await this.ticketService.get(t)}closeMessage(){this.deleteMessage.classList.remove("delete-message_visible")}async showForm(t){if(t){const e=await this.getTicket(t);this.form.show(e)}else this.form.show()}static markup(){return'\n      <table class="table">\n        <thead>\n          <tr class="tickets">\n            <th colspan="6" style="text-align:right" data-id="add"><span class="add">Добавить тикет</span></th>\n          </tr>\n        </thead>\n        <tbody></tbody>\n      </table>\n      <div class="delete-message">\n        <h2>Удалить тикет</h2>\n        <div>Вы уверены, что хотите удалить тикет? Это действие необратимо</div>\n        <div class="ticket-btn">\n          <button type="button" class="btn btn-close" data-toggle="close-message" title="Close delete message">Отмена</button>\n          <button type="button" class="btn btn-add" data-toggle="delete-ticket" title="Button for delete ticket">Ok</button>\n        </div>\n      </div>\n    '}}const r=document.getElementById("root");new n(r,"http://localhost:3000/").init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,